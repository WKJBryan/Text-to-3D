def _get_core_library(self) -> Dict:
        """Core reference library (same examples as before, no tags needed)"""
        return {
            "phone_stand": {
                "description": "Adjustable phone stand with charging port access for desk use",
                "code": """import cadquery as cq

# Phone stand with adjustable angle
width = 80
depth = 60
height = 50
angle = 15
wall_thickness = 3

# Create phone bounding box
phone = (cq.Workplane("XY")
    .box(width, depth, 8)
    .edges("|Z").fillet(2)
    )

# Create base
base = (cq.Workplane("XY")
    .box(width, depth, 8)
    .faces("-Z or +Y")
    .shell(0.5)
    )
    
# Create angled back support
support = (cq.Workplane("XY")
    .move(0, depth/4)
    .rect(width-10, wall_thickness)
    .extrude(height)
    .rotate((0,0,0), (1,0,0), angle)
    )
       
# Combine and apply finishing
result = (support.cut(phone)
    .edges(">>Z").chamfer(0.5)
    .union(base)
    )"""
            },
            
            "container_basic": {
                "description": "Basic rounded container for small items and desk organization",
                "code": """import cadquery as cq
    
# Rounded container for small items
width = 80
depth = 60
height = 30
wall_thickness = 2

# Create main container with rounded corners
container = (cq.Workplane("XY")
            .rect(width, depth)
            .extrude(height)
            .edges("|Z")
            .fillet(8) # 8mm corner radius
            .faces("+Z")
            .shell(-wall_thickness)
            )"""
            },
            
            "container_with_divider": {
                "description": "Container with internal divider for organization and compartments",
                "code": """import cadquery as cq

# Container with internal divider
width = 80
depth = 60
height = 30
wall_thickness = 2

# Create main container
container = (cq.Workplane("XY")
            .rect(width, depth)
            .extrude(height)
            .edges("|Z")
            .fillet(8) # 8mm corner radius
            .faces("+Z")
            .shell(-wall_thickness)
            )

# Add divider
divider = (cq.Workplane("XY")
            .rect(wall_thickness, depth-4)
            .extrude(height-wall_thickness)
            .translate((width/4, 0, wall_thickness))
            )

# Combine and finish
result = (container.union(divider)
            .edges("|Z").fillet(1)
            .edges(">>Z").chamfer(0.5)
            )"""
            },
            
            "lego_brick": {
                "description": "2 x 6 lego brick",
                "code": """import cadquery as cq

# Lego Brick Constants-- these make a Lego brick a Lego
lbumps = 6  # number of bumps long
wbumps = 2  # number of bumps wide
thin = True  # True for thin, False for thick

pitch = 8.0
clearance = 0.1
bumpDiam = 4.8
bumpHeight = 1.8
if thin:
    height = 3.2
else:
    height = 9.6

t = (pitch - (2 * clearance) - bumpDiam) / 2.0
postDiam = pitch - t  # works out to 6.5
total_length = lbumps * pitch - 2.0 * clearance
total_width = wbumps * pitch - 2.0 * clearance

# make the base
s = cq.Workplane("XY").box(total_length, total_width, height)

# shell inwards not outwards
s = s.faces("<Z").shell(-1.0 * t)

# make the bumps on the top
s = (
    s.faces(">Z")
    .workplane()
    .rarray(pitch, pitch, lbumps, wbumps, True)
    .circle(bumpDiam / 2.0)
    .extrude(bumpHeight)
)

# add posts on the bottom. posts are different diameter depending on geometry
# solid studs for 1 bump, tubes for multiple, none for 1x1
result = s.faces("<Z").workplane(invert=True)

if lbumps > 1 and wbumps > 1:
    result = (
        result.rarray(pitch, pitch, lbumps - 1, wbumps - 1, center=True)
        .circle(postDiam / 2.0)
        .circle(bumpDiam / 2.0)
        .extrude(height - t)
    )
elif lbumps > 1:
    result = (
        result.rarray(pitch, pitch, lbumps - 1, 1, center=True)
        .circle(t)
        .extrude(height - t)
    )
elif wbumps > 1:
    result = (
        result.rarray(pitch, pitch, 1, wbumps - 1, center=True)
        .circle(t)
        .extrude(height - t)
    )
else:
    result = s"""
            },
            
            "parametric_spur_gear": {
                "description": "parametric spur gear with adjustable teeth, module and thickness",
                "code": """
import cadquery as cq
from math import cos, sin, pi, radians

# Parametric gear
teeth=16
module=2
thickness=10

# Calculate gear dimensions
pitch_diameter = teeth * module
outer_diameter = pitch_diameter + 2 * module
base_diameter = pitch_diameter - 2.5 * module
tooth_angle = 360 / teeth

# Create gear profile points
points = []
for i in range(teeth):
    angle_base = i * tooth_angle
    # Create tooth profile
    # Leading edge of tooth
    angle1 = radians(angle_base - tooth_angle * 0.25)
    points.append((outer_diameter/2 * cos(angle1), 
                    outer_diameter/2 * sin(angle1)))
    
    # Tip of tooth
    angle2 = radians(angle_base)
    points.append((outer_diameter/2 * cos(angle2), 
                    outer_diameter/2 * sin(angle2)))
    
    # Trailing edge of tooth
    angle3 = radians(angle_base + tooth_angle * 0.25)
    points.append((outer_diameter/2 * cos(angle3), 
                    outer_diameter/2 * sin(angle3)))
    
    # Root between teeth
    angle4 = radians(angle_base + tooth_angle * 0.5)
    points.append((base_diameter/2 * cos(angle4), 
                    base_diameter/2 * sin(angle4)))

# Close the profile
points.append(points[0])

# Create gear
result = (
    cq.Workplane("XY")
    .polyline(points)
    .close()
    .extrude(thickness)
    # Add center hole for shaft
    .faces(">Z")
    .workplane()
    .circle(5)
    .cutThruAll()
    # Add keyway slot from center to edge of shaft hole
    .faces(">Z")
    .workplane()
    .move(0, 2.5)  # Start at edge of 5mm radius hole
    .rect(2, 5)    # 2mm wide, 5mm long keyway
    .cutThruAll()
    .shell(0.2)     # Smooth all edges
)"""
            },
            
            "lamp_shade": {
                "description": "Modern cylindrical lamp shade with ventilation pattern for lighting",
                "code": """
import cadquery as cq
from math import cos, sin, pi, radians

# Modern lamp shade with ventilation pattern
diameter = 80
height = 60
wall_thickness = 2
hole_radius = 1.5  # Small circular holes

# Create hollow cylinder
shade = (cq.Workplane("XY")
        .circle(diameter/2)
        .circle(diameter/2 - wall_thickness)
        .extrude(height))

# Create ventilation holes
holes_to_cut = []
for row in range(5):
    row_height = height * (0.3 + row * 0.2)
    holes_in_row = 8 + row * 4
    
    for i in range(holes_in_row):
        angle = radians((360 / holes_in_row) * i)
        
        # Position at the middle of the wall
        x = (diameter/2 - wall_thickness/2) * cos(angle)
        y = (diameter/2 - wall_thickness/2) * sin(angle)
        
        # Create small sphere for the hole
        hole = (cq.Workplane("XY")
                .workplane(offset=row_height)
                .move(x, y)
                .sphere(hole_radius * 1.5))
        
        holes_to_cut.append(hole)

# Cut all holes at once
for hole in holes_to_cut:
    shade = shade.cut(hole)

# Add reinforcement rings
top_ring = (cq.Workplane("XY")
            .workplane(offset=height - 3)
            .circle(diameter/2 + 2)
            .circle(diameter/2 - 2)
            .extrude(3))

bottom_ring = (cq.Workplane("XY")
                .circle(diameter/2 + 2)
                .extrude(3))

result = shade.union(top_ring).union(bottom_ring)
            )"""
            },

                        "traffic_cone": {
                "description": "traffic cone",
                "code": """import cadquery as cq

# Traffic Cone
length = 215
base_height = 40
base_cone = 100
height = 300
thickness = 2

result = (
    cq.Workplane("front")
    .box(length, length, base_height)
    .faces(">Z")
    .circle(base_cone)
    .workplane(offset=height)
    .circle(base_cone / 4)
    .loft(combine=True)
    .faces(">Z or <Z")
    .shell(-thickness)
)
            )"""
            },
            
            "desk_organizer": {
                "description": "Multi-compartment desk organizer with pen holders for office organization",
                "code": """import cadquery as cq

# Desk organizer with multiple compartments
width = 120
depth = 80
height = 40
wall_thickness = 2

# Create main base
base = (cq.Workplane("XY")
        .box(width, depth, wall_thickness))

# Large compartment for papers/notebooks
large_comp = (cq.Workplane("XY")
                .move(-width/4, 0)
                .rect(width/2 - 5, depth - 10)
                .extrude(height)
                .faces("+Z")
                .shell(-wall_thickness))

# Small compartments for clips, etc.
small_comp1 = (cq.Workplane("XY")
                .move(width/4, depth/4)
                .rect(width/4 - 5, depth/4)
                .extrude(height/2)
                .faces("+Z")
                .shell(-wall_thickness))

small_comp2 = (cq.Workplane("XY")
                .move(width/4, -depth/4)
                .rect(width/4 - 5, depth/4)
                .extrude(height/2)
                .faces("+Z")
                .shell(-wall_thickness))

# Pen holders (cylinders)
pen_holder1 = (cq.Workplane("XY")
                .move(width/4, 0)
                .circle(6)
                .extrude(height)
                .faces("+Z")
                .shell(-1))

pen_holder2 = (cq.Workplane("XY")
                .move(width/4 + 15, 0)
                .circle(6)
                .extrude(height)
                .faces("+Z")
                .shell(-1))

# Combine all parts
result = (base.union(large_comp)
            .union(small_comp1)
            .union(small_comp2)
            .union(pen_holder1)
            .union(pen_holder2)
            .edges().fillet(1)
            )"""

            },
            
            "cable_management": {
                "description": "Cable management clip for desk organization and wire routing",
                "code": """import cadquery as cq

# Cable management clip
width = 30
depth = 20
height = 15
cable_diameter = 8

# Create main body
body = (cq.Workplane("XY")
        .box(width, depth, height))

# Create cable channel (C-shaped)
channel = (cq.Workplane("XY")
            .circle(cable_diameter/2)
            .extrude(height + 2)
            .translate((0, -depth/4, -1)))

# Create opening for cable insertion
opening = (cq.Workplane("XY")
            .rect(cable_diameter*0.8, depth)
            .extrude(height + 2)
            .translate((0, 0, -1)))

# Combine operations
result = (body.cut(channel)
            .cut(opening)
            .edges().fillet(2)
            )"""
            },
            
            "decorative_vase": {
                "description": "Decorative twisted vase with artistic spiral geometry for home decor",
                "code": """import cadquery as cq

# Decorative twisted vase
bottom_diameter = 40
top_diameter = 30
height = 80
wall_thickness = 2

try:
    # Create base profile
    base_profile = cq.Workplane("XY").circle(bottom_diameter/2)
    
    # Create twisted vase using loft
    profiles = []
    for i in range(5):
        z_pos = (height / 4) * i
        diameter = bottom_diameter - (bottom_diameter - top_diameter) * (i / 4)
        twist_angle = 45 * i  # Twist each level by 45 degrees
        
        profile = (cq.Workplane("XY")
                  .circle(diameter/2)
                  .rotate((0, 0, 0), (0, 0, 1), twist_angle))
        
        profiles.append(profile)
    
    # Create solid vase
    vase_solid = (cq.Workplane("XY")
                 .circle(bottom_diameter/2)
                 .workplane(offset=height/4)
                 .circle((bottom_diameter*3 + top_diameter)/4/2)
                 .workplane(offset=height/4)
                 .circle((bottom_diameter + top_diameter)/2/2)
                 .workplane(offset=height/4)
                 .circle((bottom_diameter + top_diameter*3)/4/2)
                 .workplane(offset=height/4)
                 .circle(top_diameter/2)
                 .loft())
    
    # Create hollow interior
    interior = (cq.Workplane("XY")
               .circle(bottom_diameter/2 - wall_thickness)
               .workplane(offset=height/4)
               .circle((bottom_diameter*3 + top_diameter)/4/2 - wall_thickness)
               .workplane(offset=height/4)
               .circle((bottom_diameter + top_diameter)/2/2 - wall_thickness)
               .workplane(offset=height/4)
               .circle((bottom_diameter + top_diameter*3)/4/2 - wall_thickness)
               .workplane(offset=height/4)
               .circle(top_diameter/2 - wall_thickness)
               .loft())
    
    result = (vase_solid.cut(interior)
             .edges(">>Z").fillet(2)
             .edges("<<Z").fillet(3))

except Exception:
    # Fallback to simple tapered cylinder
    result = (cq.Workplane("XY")
             .circle(bottom_diameter/2)
             .workplane(offset=height)
             .circle(top_diameter/2)
             .loft()
             .shell(-wall_thickness))"""
            }
            
        }
    
    def _initialize_embeddings(self):
        """Initialize or load embeddings for semantic search"""
        embeddings_path = self.cache_dir / "reference_embeddings.pkl"
        index_path = self.cache_dir / "faiss_index.bin"
        
        if embeddings_path.exists() and index_path.exists():
            self._load_embeddings()
        else:
            self._create_embeddings()